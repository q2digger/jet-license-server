#!/usr/bin/env bash


CURRENT_VERSION=$(sed -nr 's/ENV BUILD[[:space:]]*(.+)/\1/p' Dockerfile)
# VERSION=`python bin/jet-parser.py`
VERSION="19340"

echo "Current version: $CURRENT_VERSION"
echo "Available version: $VERSION"

sed --in-place "s/${CURRENT_VERSION}/${VERSION}/g" Dockerfile

if [[ $VERSION > $CURRENT_VERSION ]]; then

  # $VERSION = $CURRENT_VERSION

  git diff --exit-code .

    if [[ $? == 0 ]]; then

	    # The specific branch already exists, consider committing a patch if there
	    # was actual changes to the repository.
	    echo "There was no changes detected. Skipping..."
    else
	    echo "Committing changes"

	    # add changes made to current branch
    	git add --all
	    git commit --message "Updated JetBrains License Server master branch to latest version ${VERSION}"

    	# push changes made to current branch
	    git push origin master

    fi

    echo "Checking if branch is already available?"
    git fetch --all &> /dev/null
    git show-branch "origin/${VERSION}" &> /dev/null

    if [[ $? == 0 ]]; then

	    # The specific branch already exists, consider committing a patch if there
	    # was actual changes to the repository.
	    echo "Branch '${VERSION}' already exist. Skipping..."
    else
	    # Create a new orphaned version branch to the repository with the current
	    # changes performed in the master repository and thereby keeps the `master`
	    # and latest version branch in sync.
	    echo "Creating new branch '${VERSION}'"

	    git checkout --orphan "${VERSION}"

	    # We do not want to include README.md in version branches since the latest
	    # built branch from the Docker Hub will use that README.md which could be
	    # misleading. Contributing is also taken out to ensure a single place for
	    # the most up-to-date information.
	    # rm --recursive --force "README.md" "CONTRIBUTING.md"

	    # Perform initial commit with the current directory as is (ie. prepared for
	    # the new version branch).
	    echo "Committing changes"

        git add --all
	    git commit --message "Created new branch for version ${VERSION}"

	    # Acutally push the new branch to the origin repository (GitHub) such that
    	# the changes are published for the Docker Hub repository and everyone else.
	    echo "Pushing new branch '${VERSION}'"

	    git push -u "origin" "${VERSION}" || exit 255

	    # Notify the new branch has been deployed.
	    echo "Deployed new version to new branch '${VERSION}'"

    fi
   
fi
